import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command

TOKEN = '6451666422:AAGmAt_MdaQAtvIwWuC2Pg1_58ZcnZgJHZg'

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

class Form(StatesGroup):
    waiting_for_input = State()

# –°—Ç–∞—Ä—Ç
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéé –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ª—è–ª—å–∫—É", callback_data="generate_doll")]
    ])
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø –¥–æ–ø–æ–º–æ–∂—É –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω—É –ª—è–ª—å–∫—É üòä", reply_markup=keyboard)

# –ö–Ω–æ–ø–∫–∞ "–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ª—è–ª—å–∫—É"
@dp.callback_query(F.data == "generate_doll")
async def ask_subscription(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîó –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ @channel1", url="https://t.me/channel1")],
        [InlineKeyboardButton(text="üîó –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ @channel2", url="https://t.me/channel2")],
        [InlineKeyboardButton(text="‚úÖ –Ø –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è", callback_data="check_subscription")]
    ])
    await callback.message.answer("–©–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏, –ø—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –≤—Å—ñ –∫–∞–Ω–∞–ª–∏:", reply_markup=keyboard)

# "–Ø –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è"
@dp.callback_query(F.data == "check_subscription")
async def fake_check(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("‚ùå –í–∏ —â–µ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ –≤—Å—ñ –∫–∞–Ω–∞–ª–∏!")
    await asyncio.sleep(15 * 60)
    await callback.message.answer("‚úÖ –î–æ–±—Ä–µ, –æ—á—ñ–∫—É–π 15 —Ö–≤–∏–ª–∏–Ω, –ø–æ–∫–∏ –≥–µ–Ω–µ—Ä—É—î—Ç—å—Å—è –ª—è–ª—å–∫–∞ ‚è≥")
    await asyncio.sleep(15 * 60)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîπ –í–≤–µ—Å—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è –ª—è–ª—å–∫–∏", callback_data="input_data")]
    ])
    await callback.message.answer("–ì–æ—Ç–æ–≤–æ! –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω—ñ.", reply_markup=keyboard)

# –ù–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ "–í–≤–µ—Å—Ç–∏ –¥–∞–Ω—ñ"
@dp.callback_query(F.data == "input_data")
async def ask_input(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏ —ñ–º‚Äô—è —Ç–∞ –±–∞–∂–∞–Ω—ñ –∞–∫—Å–µ—Å—É–∞—Ä–∏ –¥–ª—è –ª—è–ª—å–∫–∏:")
    await state.set_state(Form.waiting_for_input)

# –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ ‚Üí –≤–∏–¥–∞—î–º–æ —Ñ–µ–π–∫–æ–≤—É –ø–æ–º–∏–ª–∫—É
@dp.message(Form.waiting_for_input)
async def fake_generation(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("üòì –£–ø—Å! –°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
